---
interface Props {
	title: string;
	body: string;
	href: string;
	src: string;
}

const { href, title, body , src} = Astro.props;
---

<div class="link-card" id="tilt">
	<a href={href}>
		<div class="flex flex-row items-center justify-between gap-12 pr-4">
			<h2 class="flex gap-6">
				{title}
				<span>&rarr;</span>
			</h2>
			<img src={src} alt="Repo Owner" height="50" width="50" class="rounded-full">
		</div>
		<p>
			{body}
		</p>
	</a>
</div>
<style>
	.link-card {
		list-style: none;
		display: flex;
		transition: transform .3s ease-in-out;
		perspective: 500px;
		justify-content: flex-start;
		background-color: #23262d;
		border-radius: 7px;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		@apply aspect-square max-w-md basis-1/5;
	}
	.link-card {
		transition: transform  0.3s ease-out;
		perspective:  500px;
	}

	.link-card:hover {
		transform: scale(1.1) rotateX(0deg) rotateY(0deg);
	}

	.link-card:active {
		transform: scale(0.9) rotateX(0deg) rotateY(0deg);
	}

	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>


<script>
// Get all elements with the 'tilt' class
let els = document.getElementsByClassName('link-card');

// Loop over all elements
Array.from(els).forEach((el) => {
  // Get the height and width of the element
  const height = el.clientHeight;
  const width = el.clientWidth;

  // Add a listener for mousemove event
  el.addEventListener('mousemove', handleMove);

  // Define function a
  function handleMove(e:any) {
    // Get position of mouse cursor with respect to the element
    const xVal = e.layerX;
    const yVal = e.layerY;

    // Calculate rotation values along the Y-axis and X-axis
    const yRotation =  20 * ((xVal - width /  2) / width);
    const xRotation = -20 * ((yVal - height /  2) / height);

    // Generate string for CSS transform property
    const string = 'perspective(500px) scale(1.1) rotateX(' + xRotation + 'deg) rotateY(' + yRotation + 'deg)';

    // Apply the calculated transformation
    (el as HTMLElement).style.transform = string;
  }

  // Add listener for mouseout event, remove the rotation
  el.addEventListener('mouseout', function() {
    (el as HTMLElement).style.transform = 'perspective(500px) scale(1) rotateX(0) rotateY(0)';
  });

  // Add listener for mousedown event, to simulate click
  el.addEventListener('mousedown', function() {
    (el as HTMLElement).style.transform = 'perspective(500px) scale(0.9) rotateX(0) rotateY(0)';
  });

  // Add listener for mouseup, simulate release of mouse click
  el.addEventListener('mouseup', function() {
    (el as HTMLElement).style.transform = 'perspective(500px) scale(1.1) rotateX(0) rotateY(0)';
  });
});

</script>